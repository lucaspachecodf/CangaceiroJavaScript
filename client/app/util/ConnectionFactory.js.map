{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["ConnectionFactory","stores","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAO,kBAAMA,oBAAoB,CAAC,MAAM;AACpC,sBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;;AAEA,uBAAO,MAAMH,iBAAN,CAAwB;AAC3BI,kCAAc;AACV,8BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;AACD,2BAAOC,aAAP,GAAuB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gCAAIP,UAAJ,EAAgB,OAAOM,QAAQN,UAAR,CAAP;;AAEhB,kCAAMQ,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wCAAYG,eAAZ,GAA8BC,KAAK;AAC/Bd,kDAAkBe,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAP,wCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBZ,6CAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,MAAM;AACrB,0CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;AAGAG,wCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,6BAPD;;AASAP,wCAAYU,OAAZ,GAAsBN,KAAK;AACvBL,uCAAOK,EAAEE,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAFD;AAGH,yBAtBM,CAAP;AAuBH;;AAED,2BAAOP,aAAP,CAAqBb,UAArB,EAAiC;AAC7BD,+BAAOsB,OAAP,CAAeC,SAAS;AACpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACItB,WAAWyB,iBAAX,CAA6BH,KAA7B;;AAEJtB,uCAAW0B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAChCK,+CAAe;AADiB,6BAApC;AAGH,yBAPD;AAQH;;AAED,2BAAOC,eAAP,GAAyB;AACrB,4BAAI5B,UAAJ,EAAgB;AACZC;AACH;AACJ;AA7C0B,iBAA/B;AA+CH,aApDgC,GAA1B","file":"ConnectionFactory.js","sourcesContent":["export const ConnectionFactory = (() => {\r\n    const stores = ['negociacoes'];\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias dessa classe');\r\n        }\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if (connection) return resolve(connection);\r\n\r\n                const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                    resolve(e.target.result);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    reject(e.target.error.name)\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, {\r\n                    autoIncrement: true\r\n                });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\n"]}